# -*- coding: utf-8 -*-
"""question 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13zuvypF9ETA0-a721r2c2qFMllxNQAFw
"""

import torch
import numpy as np
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader, Subset
import torch.nn as nn
import torch.optim as optim

# Dataset preparation with image resizing
def load_data():
    transform = transforms.Compose([
        transforms.Resize((224, 224)),  # Resizing the images
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ])
    train_dataset = datasets.SVHN(root='./data', split='train', download=True, transform=transform)
    subset_indices = np.random.choice(len(train_dataset), len(train_dataset) // 4, replace=False)
    train_subset = Subset(train_dataset, subset_indices)
    train_loader = DataLoader(train_subset, batch_size=64, shuffle=True)
    return train_loader

# Model loading and adjustment for SVHN dataset
def load_pretrained_model(name):
    if name == 'alexnet':
        model = models.alexnet(pretrained=True)
        model.classifier[6] = nn.Linear(model.classifier[6].in_features, 10)
    elif name == 'vgg16':
        model = models.vgg16(pretrained=True)
        model.classifier[6] = nn.Linear(model.classifier[6].in_features, 10)
    elif name == 'resnet18':
        model = models.resnet18(pretrained=True)
        model.fc = nn.Linear(model.fc.in_features, 10)
    elif name == 'resnet50':
        model = models.resnet50(pretrained=True)
        model.fc = nn.Linear(model.fc.in_features, 10)
    elif name == 'resnet101':
        model = models.resnet101(pretrained=True)
        model.fc = nn.Linear(model.fc.in_features, 10)
    else:
        print(f"Unsupported model: {name}")
        model = None
    return model

# Training function
def train_model(model, train_loader, epochs=10):
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    model.train()
    for epoch in range(epochs):
        running_loss = 0.0
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {running_loss / len(train_loader)}")
    print("Finished Training")

if __name__ == "__main__":
    model_names = ['alexnet', 'vgg16', 'resnet18', 'resnet50', 'resnet101']
    train_loader = load_data()

    for model_name in model_names:
        print(f"Training {model_name}")
        model = load_pretrained_model(model_name)
        if model is not None:
            train_model(model, train_loader)